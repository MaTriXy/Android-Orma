apply from: project.file('metadata.gradle')
apply from: project.file('versioning.gradle')

final ANDROID_SDK_PATH = {
    final localProperties = new Properties()
    try {
        localProperties.load(new FileInputStream("${project.rootProject.projectDir}/local.properties"))
    } catch (IOException e) { /* ignore errors */
    }
    def androidSdkPath = localProperties['sdk.dir'] ?: System.getenv('ANDROID_HOME')
    if (!androidSdkPath) {
        throw new RuntimeException("Missing local.properties")
    }
    androidSdkPath
}()
final ANDROID_SUPPORT_REPOSITORY = "${ANDROID_SDK_PATH}/extras/android/m2repository"

ext {
    SUPPORT_LIBRARY_VERSION = '26.0.0-alpha1'
    ANDROID_JAR = fileTree(dir: "${ANDROID_SDK_PATH}/platforms/android-25/", include: 'android.jar')
    metadata.version = versionName
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.novoda:bintray-release:0.5.0' // https://github.com/novoda/bintray-release
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    }

    // it conflicts with retrolambda
    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {
    repositories {
        maven {
            url ANDROID_SUPPORT_REPOSITORY
        }

        jcenter()
    }

    gradle.projectsEvaluated {
        if (project.name == "example") {
            return
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all" << "-Xlint:-processing"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

String shell(String command) {
    def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
    if (proc.waitFor() != 0) {
        throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
    } else {
        def err = proc.err.text
        if (err) {
            System.err.println(err)
        }
    }
    return proc.in.text;
}

task releng {
    doLast {
        def currentBranch = shell("git symbolic-ref --short HEAD")
        def tag = "v" + versionName
        println "Release engineering for ${tag} (branch=${currentBranch})"

        def changes = shell "git status -s"
        if (changes.trim()) {
            throw new RuntimeException("There are changes not commited yet.\n${changes}")
        }

        println "> git tag ${tag}"
        shell "git tag ${tag}"
        println "> git push origin ${tag}"
        shell "git push origin ${tag}"
        shell "git push origin ${currentBranch}"
    }
}

class TimingsListener implements TaskExecutionListener, BuildListener {
    private long clock
    private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def now = System.nanoTime()
        def ms = java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(now - clock)
        clock = now
        timings.add([ms, task.path])
    }

    @Override
    void buildFinished(BuildResult result) {
        def timingsOverThreshold = timings.grep { timing -> timing[0] > 1000 }
        if (!timingsOverThreshold.empty) {
            println "Task timings:"
            for (timing in timingsOverThreshold.toSorted { a, b -> b[0] <=> a[0] }) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()
